palette = "jco" # Color palette
)
dist.blosum62 <- as.dist(blosum62)
res.blosum62 <- hclust(d = dist.blosum62, method = "ward.D2")
res.blosum62 <- hclust(d = dist.blosum62, method = "complete")
fviz_dend(res.blosum62, cex = 0.5)
max(blosum62)
blosum62 + 16
-blosum62 + 16
blosum62 <- -blosum62 + 16
dist.blosum62 <- as.dist(blosum62)
res.blosum62 <- hclust(d = dist.blosum62, method = "complete")
fviz_dend(res.blosum62, cex = 0.5)
cor(blosum62, cophenetic(res.blosum62))
cor(dist.blosum62, cophenetic(res.blosum62))
res.blosum62 <- hclust(d = dist.blosum62, method = "average")
fviz_dend(res.blosum62, cex = 0.5)
cor(dist.blosum62, cophenetic(res.blosum62))
res.blosum62 <- hclust(d = dist.blosum62, method = "complete")
fviz_dend(res.blosum62, cex = 0.5)
cor(dist.blosum62, cophenetic(res.blosum62))
fviz_dend(res.blosum62, k =4 , # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 5, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 10, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 4, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 6, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 7, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 8, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 9, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 11, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 12, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 13, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
dist.blosum62
blosum62
?diana()
res.diana <- diana(X, diss = inherits(blosum62, diss = TRUE))
res.diana <- diana(X, diss = TRUE)
res.diana <- diana(blosum62, diss = TRUE)
fviz_dend(res.blosum62, k = 13, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(res.blosum62, k = 5, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
dist.blosum62
blosum62
res.diana <- diana(blosum62, diss = TRUE)
fviz_dend(res.blosum62, k = 5, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
library("cluster")
library("factoextra")
library("magrittr")
library("bios2mds")
# Cut in 13 groups and color by groups
fviz_dend(res.blosum62, k = 13, # Cut in four groups
cex = 0.5, # label size
#k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
install.packages("rjson")
class(blosum62)
install.packages(grid.Extra)
install.packages(grid.Extra)
install.packages(gridExtra)
install.packages(gridExtra)
install.packages(cowplot)
install.packages("C:/Users/leo/Downloads/gridExtra_2.3.zip", repos = NULL, type = "win.binary")
install.packages(grid)
library(ggplot2)
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm)
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm)+
geom_smooth(size = 1.5)
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-3, 3)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dgamma(shape = 2, scale = 1), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dgamma, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(0, 5)), aes(x)) + stat_function(fun = function(x) x*exp(-x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-5, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-8, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(0, 6)), aes(x)) + stat_function(fun = function(x) x*exp(-x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
par(mfrow = c(1,3))
p2
library(ggplot2)
p1 <- ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# A right-skewed function
p2 <- ggplot(data.frame(x = c(0, 6)), aes(x)) + stat_function(fun = function(x) x*exp(-x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# A left-skewed function
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# put the above three graphs in one figure
par(mfrow = c(1,3))
p2
p1
p3
plot(p2, p1, p3)
library(gridExtra)
grid.arrange(p2, p1, p3, nrow = 1)
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x = element_text('left-skewed distribution', size = 6))
grid.arrange(p2, p1, p3, nrow = 1)
axis.title.x = element_text('left-skewed distribution'))
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
xlab('Left-skewed distribution', size = 2)
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
xlab('Left-skewed distribution')
grid.arrange(p2, p1, p3, nrow = 1)
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
xlab('Left-skewed')
grid.arrange(p2, p1, p3, nrow = 1)
p1 <- ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
theme_minimal()+
xlab('Symmetric')
grid.arrange(p2, p1, p3, nrow = 1)
p1 <- ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
xlab('Symmetric')
# A right-skewed function
p2 <- ggplot(data.frame(x = c(0, 6)), aes(x)) + stat_function(fun = function(x) x*exp(-x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
xlab('Right-skewed')
# A left-skewed function
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
xlab('Left-skewed')
# put the above three graphs in one figure
library(gridExtra)
grid.arrange(p2, p1, p3, nrow = 1)
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_text(size = 14, face = 'bold'))+
xlab('Left-skewed')
grid.arrange(p2, p1, p3, nrow = 1)
library(ggplot2)
p1 <- ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm, size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_text(size = 14, face = 'bold'))+
xlab('Symmetric')
# A right-skewed function
p2 <- ggplot(data.frame(x = c(0, 6)), aes(x)) + stat_function(fun = function(x) x*exp(-x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_text(size = 14, face = 'bold'))+
xlab('Right-skewed')
# A left-skewed function
p3 <- ggplot(data.frame(x = c(-6, 0)), aes(x)) + stat_function(fun = function(x) -x*exp(x), size = 1)+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_text(size = 14, face = 'bold'))+
xlab('Left-skewed')
# put the above three graphs in one figure
library(gridExtra)
grid.arrange(p2, p1, p3, nrow = 1)
data <- rgamma(10000, scale = 1, shape = 2)
library(ggplot2)
smooth_cdf <- function(data, kernel_lenghth, sample_size = 100){
#decide the sample values
point_interval = diff(range(data))/sample_size
points <- rep(0, sample_size + 1)
least = min(data)
for (i in 1: length(points)){
points[i] <- least + (i-1.5)* point_interval
}
#Calculate kernel density
kernel_density <- rep(0, length(points))
for (i in 1:length(points)){
kernel_density[i] <-
sum(data > points[i] - kernel_lenghth & data <= points[i] + kernel_lenghth )/(2*kernel_lenghth*length(data))
}
#Calculate the cumulative density
cumulative_density <- rep(0, length(kernel_density))
for (i in 1:length(kernel_density)){
cumulative_density[i] <- sum(kernel_density[1:i]) * point_interval
}
# draw the scatterplot and the corve
DataFrame <- data.frame(d = points, c = cumulative_density)
ggplot(DataFrame, aes(x = d, y = c)) + geom_point(alpha = 0) +
geom_smooth(method='auto', se=FALSE, fullrange=TRUE)
}
smooth_cdf(data, kernel_lenghth = 0.2, sample_size = 1000) +
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" )) +
ylab('Cumulative relative frequency')+
xlab('FINAL')+ geom_smooth(size = 1.5)
generater <- runif(10000)
GammaData <- dgamma(generater, scale = 1, shape = 2)
gamma.frame <- data.frame(generater, GammaData)
ggplot(gamma.frame, aes(x = generater, y = GammaData)) +
geom_point(alpha = 0)+
geom_smooth(method='auto', se=FALSE, fullrange=TRUE)
generater <- runif(10000)
GammaData <- qgamma(generater, scale = 1, shape = 2)
gamma.frame <- data.frame(generater, GammaData)
ggplot(gamma.frame, aes(x = generater, y = GammaData)) +
geom_point(alpha = 0)+
geom_smooth(method='auto', se=FALSE, fullrange=TRUE)
generater <- runif(10000)
GammaData <- qgamma(generater, scale = 1, shape = 2)
gamma.frame <- data.frame(generater, GammaData)
ggplot(gamma.frame, aes(y = generater, x = GammaData)) +
geom_point(alpha = 0)+
geom_smooth(method='auto', se=FALSE, fullrange=TRUE)
data <- rgamma(10000, shape = 2, scale = 1)
smooth_cdf(data, kernel_lenghth = 0.2, sample_size = 1000) +
+     theme(axis.title=element_text(size=14,face="bold"),
+           axis.text = element_text(size = 10,face="bold" )) +
+     ylab('Cumulative relative frequency')+
+     xlab('FINAL')+ geom_smooth(size = 1.5)
smooth_cdf(data, kernel_lenghth = 0.2, sample_size = 1000) +
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" )) +
ylab('Cumulative relative frequency')
data <- rgamma(10000, shape = 2, scale = 1)
smooth_cdf(data, kernel_lenghth = 0.2, sample_size = 1000) +
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" )) +
ylab('Cumulative relative frequency')+
xlab('X')+
xlim(c(0.2, 7))
data <- rgamma(10000, shape = 2, scale = 1)
smooth_cdf(data, kernel_lenghth = 0.2, sample_size = 1000) +
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" )) +
ylab('Cumulative relative frequency')+
xlab('X')+
xlim(c(0.1, 7))
data1 <- rnorm(100, mean = -1, sd = 0.2)
data2 <- rnorm(100, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
data1 <- rnorm(100, mean = -1, sd = 0.2)
data2 <- rnorm(100, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = two_cluster_data, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" ))
data1 <- rnorm(100, mean = -1, sd = 0.2)
data2 <- rnorm(100, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" ))
library(ggplot2)
library(scales)
data1 <- rnorm(3, mean = -1, sd = 0.2)
data2 <- rnorm(200, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" ))
library(ggplot2)
library(scales)
data1 <- rnorm(5, mean = -1, sd = 0.1)
data2 <- rnorm(200, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" ))
# Outliers
library(ggplot2)
library(scales)
data1 <- rnorm(5, mean = -1, sd = 0.05)
data2 <- rnorm(200, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title=element_text(size=14,face="bold"),
axis.text = element_text(size = 10,face="bold" ))
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title.x=element_text(size=14,face="bold"),
axis.text.x = element_text(size = 10,face="bold" ),
axis.title.y =element_blank(),
axis.text.y = element_blank())
data1 <- rnorm(100, mean = -1, sd = 0.2)
data2 <- rnorm(100, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title.x=element_text(size=14,face="bold"),
axis.text.x = element_text(size = 10,face="bold" ),
axis.title.y =element_blank(),
axis.text.y = element_blank())
library(ggplot2)
library(scales)
data1 <- rnorm(5, mean = -1, sd = 0.05)
data2 <- rnorm(200, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title.x=element_text(size=14,face="bold"),
axis.text.x = element_text(size = 10,face="bold" ),
axis.title.y =element_blank(),
data1 <- rnorm(5, mean = -1, sd = 0.05)
data2 <- rnorm(200, mean = 1, sd = 0.2)
two_cluster_data <- c(data1, data2)
Data_frame_two_cluster <- data.frame(two_cluster_data)
ggplot(data = Data_frame_two_cluster, aes(two_cluster_data)) +
geom_histogram(breaks=seq(-2, 2, by = 0.2),
col="black",
fill=" white",
alpha = .2) +
labs(x="X", y="")+
theme(axis.title.x=element_text(size=14,face="bold"),
axis.text.x = element_text(size = 10,face="bold" ),
axis.title.y =element_blank(),
axis.text.y = element_blank())
21/26
6/26
25/52
setwd("C:/Users/leo/Documents/Teaching/Statistics/Teaching plans/Descriptional Statistics")
setwd("C:/Users/leo/Documents/Teaching/Statistics/Teaching plans/Descriptional Statistics")
Scores <- read.csv('Scores.csv')
library(ggplot2)
ggplot(Scores, aes(x=Calculus, y=Physics)) +
geom_point(size = 3)+
theme(axis.title=element_text(size=16,face="bold"),
axis.text = element_text(size = 12,face="bold" ))
